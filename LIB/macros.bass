// Align to Byte Amount
macro align(size) {
  while (pc() % {size}) {
    db 0
  }
}

//Write a null-terminated string
macro asciiz(define str) {
  db {str}, 0x00
}
// Write and fill a null-terminated string [bit]
macro asciizAlign(string, length) {
  variable start(pc())
  db {string}, 0x00
  fill {length} - (pc() - start)
}

// Prints a hex number to stdout
macro printHex(variable value) {
  if value > 15 {
    printHex(value >> 4)
  }
  value = value & 15
  putchar(value < 10 ? '0' + value : 'A' + value -10)
}

// Prints DMA info
macro printDMAInfo(variable ROM, variable RAM, evaluate SIZE) {
    print "ROM Addr: 0x"; printHex(ROM)
    print "\nRAM Addr: 0x"; printHex(RAM)
    print "\nTotal Size: {SIZE} byte"
    if {SIZE} > 1 {
      print "s"
    }
    print "\n\n"
}

macro errorOnAddr(current, addr, location, warnSize) {
  if {current} >= {addr} {
    print "Current: 0x"; printHex({current}); print "\n"
    print "Max: 0x"; printHex({addr}); print "\n"
    error "{location} is at or above its limit! Stopping assembly!!"
  } else if {defined warnSize} {
    if {current} >= {addr} - {warnSize} {
      print "Current: 0x"; printHex({current}); print "\n"
      print "Max: 0x"; printHex({addr}); print "\n"
      warning "{location} is approaching its limit!\n\n"
    }
  }
}

macro nopUntil(current, addr, location) {
  if {current} > {addr} {
    print "nopUntil macro error! \n"
    print "Current: 0x"; printHex({addr}); print "\n"
    print "Max: 0x"; printHex({addr}); print "\n"
    error "Stopping assembly at {location}!!\n\n"
  } else {
    while {current} < {addr} {
      nop
    }
  }
}

macro nopUntilPC(addr, location) {
  nopUntil(pc(), {addr}, {location})
}

macro nopUntilOrigin(addr, location) {
  nopUntil(origin(), {addr}, {location})
}

// Calculate stack size in bytes for a leaf routine
//    Since bass can't "return" a value, the global keyword
//    creates a {StackSize} evaluate that can be used within the called scope
macro leafStackSize(variable words) {
  global evaluate StackSize(words * 4)
  while {StackSize} % 8 != 0 {
    global evaluate StackSize({StackSize} + 4)
  }
}

// Calculate stack size in bytes for a non-leaf routine
// eg, one that calls other functions,
// so need to have 0x18 extra on stack
//    0x0 to 0xC for the a0-3 registers
//    0x10 is pad
//    0x14 is for RA
macro nonLeafStackSize(variable words) {
  global evaluate StackSize(0x18 + words * 4)
  while {StackSize} % 8 != 0 {
    global evaluate StackSize({StackSize} + 4)
  }
}

// Quick loading macros. These can split a 32bit address into
// two instructions (lui/lw) instead of three (lui/or/lw)
// Also, they can add a register with an offset to an
// immediate base address in 3 instructions, not 4.
macro lwAddr(variable dest, variable addr, variable offsetReg ) {
  variable upperAddr( (addr >> 16) & 0xFFFF )
  variable lowerAddr( addr & 0xFFFF )

  if lowerAddr & 0x8000 {
    upperAddr = upperAddr + 1
  }

    lui   dest, upperAddr
  if offsetReg {
    addu  dest, dest, offsetReg
  }
    lw    dest, lowerAddr(dest)
}

macro lbuAddr(variable dest, variable addr, variable offsetReg ) {
  variable upperAddr( (addr >> 16) & 0xFFFF )
  variable lowerAddr( addr & 0xFFFF )

  if lowerAddr & 0x8000 {
    upperAddr = upperAddr + 1
  }

    lui   dest, upperAddr
  if offsetReg {
    addu   dest, dest, offsetReg
  }
    lbu   dest, lowerAddr(dest)
}
